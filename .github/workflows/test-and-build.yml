name: Test and Build Docker Image

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
      - '[0-9]+.*'
  pull_request:

permissions:
  actions: write
  contents: read
  packages: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  prepare:
    name: Run tests and prepare metadata
    runs-on: ubuntu-latest
    env:
      REGISTRY: ghcr.io
      IMAGE_BASENAME: ${{ github.repository_owner }}/asa-linux-server
    outputs:
      version: ${{ steps.version.outputs.version }}
      tags: ${{ steps.metadata.outputs.tags }}
      push-enabled: ${{ steps.push-enabled.outputs.value }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: pyproject.toml

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install pytest .

      - name: Run tests
        if: ${{ hashFiles('tests/**/*.py') != '' }}
        run: |
          pytest -q

      - name: Extract version from pyproject.toml
        id: version
        run: |
          VERSION=$(python3 -c "
          import tomllib
          with open('pyproject.toml', 'rb') as f:
              data = tomllib.load(f)
          print(data['project']['version'])
          ")

          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            PR_NUMBER="${{ github.event.pull_request.number }}"
            SHORT_SHA="${{ github.event.pull_request.head.sha }}"
            SHORT_SHA="${SHORT_SHA:0:7}"
            FINAL_VERSION="${VERSION}-pr${PR_NUMBER}-${SHORT_SHA}"
          elif [[ "${{ github.ref_type }}" == "tag" ]]; then
            FINAL_VERSION="${{ github.ref_name }}"
            FINAL_VERSION="${FINAL_VERSION#v}"
          else
            FINAL_VERSION="${VERSION}"
          fi

          echo "version=${FINAL_VERSION}" >> $GITHUB_OUTPUT
          echo "Determined version: ${FINAL_VERSION}"

      - name: Generate image metadata
        id: metadata
        run: |
          IMAGE_BASE="${{ env.REGISTRY }}/$(echo '${{ env.IMAGE_BASENAME }}' | tr '[:upper:]' '[:lower:]')"
          VERSION="${{ steps.version.outputs.version }}"

          TAGS="${IMAGE_BASE}:${VERSION}"

          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            PR_NUMBER="${{ github.event.pull_request.number }}"
            PR_SHA="${{ github.event.pull_request.head.sha }}"
            PR_SHA_SHORT="${PR_SHA:0:7}"
            TAGS="${TAGS}"$'\n'"${IMAGE_BASE}:pr-${PR_NUMBER}"
            TAGS="${TAGS}"$'\n'"${IMAGE_BASE}:pr-${PR_NUMBER}-${PR_SHA_SHORT}"
          elif [[ "${{ github.ref_name }}" == "main" ]]; then
            TAGS="${TAGS}"$'\n'"${IMAGE_BASE}:latest"
          fi

          {
            echo "tags<<__EOF__"
            echo "${TAGS}"
            echo "__EOF__"
          } >> "$GITHUB_OUTPUT"
          echo "Generated tags: ${TAGS//$'\n'/, }"

      - name: Determine whether pushing is permitted
        id: push-enabled
        run: |
          if [ "${{ github.event_name != 'pull_request' || (github.event.pull_request && !github.event.pull_request.draft) }}" = "true" ]; then
            echo "value=true" >> "$GITHUB_OUTPUT"
            echo "Image push enabled"
          else
            echo "value=false" >> "$GITHUB_OUTPUT"
            echo "Image push disabled for this workflow run"
          fi

  build-image:
    name: Build ${{ matrix.name }} image
    needs: prepare
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: amd64
            runner: ubuntu-latest
            platform: linux/amd64
          - name: arm64
            runner: ubuntu-24.04-arm
            platform: linux/arm64
    env:
      VERSION: ${{ needs.prepare.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Derive build cache scopes
        id: cache-scope
        run: |
          echo "scope=${{ github.workflow }}" >> "$GITHUB_OUTPUT"
          echo "Using cache scope: ${{ github.workflow }}"

      - name: Log in to GHCR
        if: ${{ needs.prepare.outputs.push-enabled == 'true' }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare image tags for this architecture
        id: arch-tags
        run: |
          arch="${{ matrix.name }}"
          tags="${{ needs.prepare.outputs.tags }}"
          arch_tags=""
          while IFS= read -r tag; do
            [ -z "$tag" ] && continue
            if [ -n "$arch_tags" ]; then
              arch_tags+=$'\n'
            fi
            arch_tags+="${tag}-${arch}"
          done <<< "$tags"

          {
            echo "tags<<__EOF__"
            echo "$arch_tags"
            echo "__EOF__"
          } >> "$GITHUB_OUTPUT"
          echo "Architecture-specific tags: ${arch_tags//$'\n'/, }"

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: ${{ matrix.platform }}
          push: ${{ needs.prepare.outputs.push-enabled == 'true' }}
          tags: ${{ steps.arch-tags.outputs.tags }}
          build-args: |
            VERSION=${{ env.VERSION }}
            GIT_COMMIT=${{ github.sha }}
            BUILD_DATE=${{ github.run_id }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  publish-manifest:
    name: Publish multi-arch manifest
    needs:
      - prepare
      - build-image
    if: ${{ needs.prepare.outputs.push-enabled == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish merged manifest
        run: |
          tags="${{ needs.prepare.outputs.tags }}"
          if [ -z "$tags" ]; then
            echo "No tags to publish" >&2
            exit 0
          fi

          while IFS= read -r tag; do
            [ -z "$tag" ] && continue
            echo "Creating manifest for ${tag}"
            docker buildx imagetools create \
              -t "$tag" \
              "${tag}-amd64" \
              "${tag}-arm64"
          done <<< "$tags"
