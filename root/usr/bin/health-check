#!/bin/bash

# ARK: Survival Ascended Server Health Check Script
# This script provides comprehensive health monitoring for the ASA server

set -e

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
HEALTH_CHECK_TIMEOUT=30
RCON_TIMEOUT=10
MAX_MEMORY_USAGE_GB=14
MIN_FREE_DISK_GB=5

# Health check results
OVERALL_STATUS="HEALTHY"
CHECKS_PASSED=0
CHECKS_TOTAL=0

print_status() {
    local status=$1
    local message=$2
    
    if [[ $status == "OK" ]]; then
        echo -e "  ${GREEN}✓${NC} $message"
        ((CHECKS_PASSED++))
    elif [[ $status == "WARNING" ]]; then
        echo -e "  ${YELLOW}⚠${NC} $message"
        OVERALL_STATUS="WARNING"
        ((CHECKS_PASSED++))
    else
        echo -e "  ${RED}✗${NC} $message"
        OVERALL_STATUS="UNHEALTHY"
    fi
    ((CHECKS_TOTAL++))
}

# Check if ARK server process is running
check_server_process() {
    echo "🔍 Checking server process..."
    
    if pgrep -f 'ArkAscendedServer.exe|AsaApiLoader.exe' > /dev/null; then
        local pid=$(pgrep -f 'ArkAscendedServer.exe|AsaApiLoader.exe' | head -1)
        local uptime=$(ps -o etime= -p $pid 2>/dev/null | tr -d ' ')
        print_status "OK" "Server process running (PID: $pid, Uptime: $uptime)"
    else
        print_status "CRITICAL" "Server process not found"
    fi
}

# Check memory usage
check_memory_usage() {
    echo "🧠 Checking memory usage..."
    
    local memory_info=$(ps -o rss -C ArkAscendedServer.exe 2>/dev/null | tail -n +2 | head -1)
    if [[ -z "$memory_info" ]]; then
        memory_info=$(ps -o rss -C AsaApiLoader.exe 2>/dev/null | tail -n +2 | head -1)
    fi
    
    if [[ -n "$memory_info" ]]; then
        local memory_mb=$((memory_info / 1024))
        local memory_gb=$(echo "scale=2; $memory_mb / 1024" | bc)
        
        if (( $(echo "$memory_gb > $MAX_MEMORY_USAGE_GB" | bc -l) )); then
            print_status "WARNING" "Memory usage high: ${memory_gb}GB (max recommended: ${MAX_MEMORY_USAGE_GB}GB)"
        else
            print_status "OK" "Memory usage normal: ${memory_gb}GB"
        fi
    else
        print_status "CRITICAL" "Cannot determine memory usage"
    fi
}

# Check disk space
check_disk_space() {
    echo "💽 Checking disk space..."
    
    local free_space_kb=$(df /home/gameserver | tail -1 | awk '{print $4}')
    local free_space_gb=$(echo "scale=2; $free_space_kb / 1024 / 1024" | bc)
    
    if (( $(echo "$free_space_gb < $MIN_FREE_DISK_GB" | bc -l) )); then
        print_status "CRITICAL" "Low disk space: ${free_space_gb}GB free (minimum: ${MIN_FREE_DISK_GB}GB)"
    else
        print_status "OK" "Disk space sufficient: ${free_space_gb}GB free"
    fi
}

# Check RCON connectivity
check_rcon() {
    echo "🎮 Checking RCON connectivity..."
    
    local config_file="/home/gameserver/server-files/ShooterGame/Saved/Config/WindowsServer/GameUserSettings.ini"
    
    if [[ ! -f "$config_file" ]]; then
        print_status "WARNING" "Configuration file not found - server may be starting"
        return
    fi
    
    local rcon_enabled=$(grep -i "RCONEnabled" "$config_file" 2>/dev/null | cut -d'=' -f2 | tr -d ' \r\n' | tr '[:upper:]' '[:lower:]')
    
    if [[ "$rcon_enabled" == "true" ]]; then
        if timeout $RCON_TIMEOUT asa-ctrl rcon --exec 'getgametime' > /dev/null 2>&1; then
            print_status "OK" "RCON responsive"
        else
            print_status "WARNING" "RCON not responding (server may be starting)"
        fi
    else
        print_status "WARNING" "RCON disabled in configuration"
    fi
}

# Check server files integrity
check_server_files() {
    echo "📁 Checking server files..."
    
    local server_exe="/home/gameserver/server-files/ShooterGame/Binaries/Win64/ArkAscendedServer.exe"
    local plugin_exe="/home/gameserver/server-files/ShooterGame/Binaries/Win64/AsaApiLoader.exe"
    
    if [[ -f "$server_exe" ]] || [[ -f "$plugin_exe" ]]; then
        print_status "OK" "Server executable found"
    else
        print_status "CRITICAL" "Server executable missing"
    fi
    
    local save_dir="/home/gameserver/server-files/ShooterGame/Saved"
    if [[ -d "$save_dir" ]]; then
        print_status "OK" "Save directory exists"
    else
        print_status "WARNING" "Save directory not found - server may be initializing"
    fi
}

# Check network connectivity
check_network() {
    echo "🌐 Checking network connectivity..."
    
    local game_port=$(grep -i "Port=" /home/gameserver/server-files/ShooterGame/Saved/Config/WindowsServer/GameUserSettings.ini 2>/dev/null | cut -d'=' -f2 | cut -d'?' -f1 | tr -d ' \r\n')
    
    if [[ -n "$game_port" ]]; then
        if ss -tuln | grep -q ":$game_port "; then
            print_status "OK" "Game port $game_port is bound"
        else
            print_status "WARNING" "Game port $game_port not bound (server may be starting)"
        fi
    else
        print_status "WARNING" "Cannot determine game port"
    fi
}

# Check proton status
check_proton() {
    echo "🍷 Checking Proton status..."
    
    local proton_dir="/home/gameserver/Steam/compatibilitytools.d"
    if [[ -d "$proton_dir" ]] && ls "$proton_dir"/GE-Proton* > /dev/null 2>&1; then
        local proton_version=$(ls "$proton_dir" | grep GE-Proton | head -1)
        print_status "OK" "Proton installed: $proton_version"
    else
        print_status "CRITICAL" "Proton not found"
    fi
    
    local compat_data="/home/gameserver/server-files/steamapps/compatdata/2430930"
    if [[ -d "$compat_data" ]]; then
        print_status "OK" "Proton compatibility data initialized"
    else
        print_status "WARNING" "Proton compatibility data not found"
    fi
}

# Generate health report
generate_report() {
    echo ""
    echo "=================================="
    
    if [[ $OVERALL_STATUS == "HEALTHY" ]]; then
        echo -e "${GREEN}🟢 OVERALL STATUS: HEALTHY${NC}"
    elif [[ $OVERALL_STATUS == "WARNING" ]]; then
        echo -e "${YELLOW}🟡 OVERALL STATUS: WARNING${NC}"
    else
        echo -e "${RED}🔴 OVERALL STATUS: UNHEALTHY${NC}"
    fi
    
    echo "Checks passed: $CHECKS_PASSED/$CHECKS_TOTAL"
    echo "Timestamp: $(date)"
    echo "=================================="
    
    # Return appropriate exit code for Docker health check
    if [[ $OVERALL_STATUS == "UNHEALTHY" ]]; then
        exit 1
    else
        exit 0
    fi
}

# Main execution
main() {
    echo "🏥 ARK Server Health Check"
    echo "=========================="
    echo ""
    
    check_server_process
    check_memory_usage
    check_disk_space
    check_rcon
    check_server_files
    check_network
    check_proton
    
    generate_report
}

# Check if bc is available for calculations
if ! command -v bc &> /dev/null; then
    echo "Warning: 'bc' not found, some calculations may be inaccurate"
fi

# Run main function
main "$@"